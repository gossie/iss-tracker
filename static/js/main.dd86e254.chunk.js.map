{"version":3,"sources":["world.jpg","IssPosition.js","Map.js","serviceWorker.js","index.js","App.js"],"names":["module","exports","IssPosition","props","Fragment","className","position","latitude","longitude","timestamp","Map","useEffect","canvas","document","getElementById","ctx","getContext","width","height","clearRect","middle","current","x","y","background","Image","src","world","onload","drawImage","fillRect","id","Boolean","window","location","hostname","match","ReactDOM","render","useState","setPosition","interval","setInterval","fetch","then","response","json","iss_position","clearInterval","usePosition","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,mC,iKCE5B,SAASC,EAAYC,GAClC,OACE,kBAAC,IAAMC,SAAP,KACE,6BACE,0BAAMC,UAAU,SAAhB,aACA,8BAAOF,EAAMG,SAASC,WAExB,6BACE,0BAAMF,UAAU,SAAhB,cACA,8BAAOF,EAAMG,SAASE,YAExB,6BACE,0BAAMH,UAAU,SAAhB,cACA,8BAAOF,EAAMG,SAASG,a,oBCZf,SAASC,EAAIP,GA8B1B,OA5BAQ,qBAAU,WACR,IAAMC,EAASC,SAASC,eAAe,OACvCC,EAAMH,EAAOI,WAAW,MAExBJ,EAAOK,MAAQ,IACfL,EAAOM,OAAS,IAEhBH,EAAII,UAAU,EAAG,EAAGP,EAAOK,MAAOL,EAAOM,QAEzC,IAAME,EACD,IADCA,EAED,IAGCC,EAAU,CACdC,EAAGF,EAAYjB,EAAMG,SAASE,UAAY,IAAOY,EACjDG,EAAGH,EAAYjB,EAAMG,SAASC,SAAW,GAAMa,GAG7CI,EAAa,IAAIC,MACrBD,EAAWE,IAAMC,IAEjBH,EAAWI,OAAS,WAClBb,EAAIc,UAAUL,EAAW,EAAE,GAC3BT,EAAIe,SAAST,EAAQC,EAAGD,EAAQE,EAAG,GAAI,QAKzC,4BAAQQ,GAAG,Q,MCtBKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCDD,WAEb,IAAMhC,EAUR,WAAwB,IAAD,EACWiC,mBAAS,CAAChC,SAAU,EAAGC,UAAW,IAD7C,mBACdF,EADc,KACJkC,EADI,KAgBrB,OAbA7B,qBAAU,WACR,IAAM8B,EAAWC,aAAY,WAC3BC,MAAM,2CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIN,EAAY,CACxBjC,SAAUuC,EAAKC,aAAaxC,SAC5BC,UAAWsC,EAAKC,aAAavC,UAC7BC,UAAWqC,EAAKrC,iBAEnB,KACH,OAAO,kBAAMuC,cAAcP,OAGtBnC,EA1BU2C,GAEjB,OACE,6BACE,kBAAC/C,EAAD,CAAaI,SAAUA,IACvB,kBAACI,EAAD,CAAKJ,SAAUA,ODNL,MAASO,SAASC,eAAe,SD2H3C,kBAAmBoC,WACrBA,UAAUC,cAAcC,MAAMR,MAAK,SAAAS,GACjCA,EAAaC,kB","file":"static/js/main.dd86e254.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/world.639ff869.jpg\";","import React from 'react';\n\nexport default function IssPosition(props) {\n  return (\n    <React.Fragment>\n      <div>\n        <span className='label'>Latitude:</span>\n        <span>{props.position.latitude}</span>\n      </div>\n      <div>\n        <span className='label'>Longitude:</span>\n        <span>{props.position.longitude}</span>\n      </div>\n      <div>\n        <span className='label'>Timestamp:</span>\n        <span>{props.position.timestamp}</span>\n      </div>\n    </React.Fragment>\n  );\n}","import React, {useEffect} from 'react';\nimport world from './world.jpg';\n\nexport default function Map(props) {\n\n  useEffect(() => {\n    const canvas = document.getElementById('map'),\n    ctx = canvas.getContext('2d');\n\n    canvas.width = 355;\n    canvas.height = 229;\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    const middle = {\n      x: 177,\n      y: 114\n    };\n\n    const current = {\n      x: middle.x + (props.position.longitude / 180) * middle.x,\n      y: middle.y - (props.position.latitude / 90) * middle.y,\n    };\n\n    var background = new Image();\n    background.src = world;\n\n    background.onload = () => {\n      ctx.drawImage(background,0,0);\n      ctx.fillRect(current.x, current.y, 25, 20);\n    }\n  });\n\n  return (\n    <canvas id='map' />\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, {useState, useEffect} from 'react';\nimport IssPosition from './IssPosition'\nimport Map from './Map'\nimport './App.css';\n\nexport default function App() {\n\n  const position = usePosition();\n\n  return (\n    <div>\n      <IssPosition position={position}></IssPosition>\n      <Map position={position} />\n    </div>\n  );\n}\n\nfunction usePosition() {\n  const [position, setPosition] = useState({latitude: 0, longitude: 0});\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      fetch('http://api.open-notify.org/iss-now.json')\n        .then(response => response.json())\n        .then(json => setPosition({\n          latitude: json.iss_position.latitude,\n          longitude: json.iss_position.longitude,\n          timestamp: json.timestamp\n        }));\n    }, 5000);\n    return () => clearInterval(interval);\n  });\n\n  return position;\n}\n"],"sourceRoot":""}